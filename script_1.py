# Create the complete fixed networking project

import os
import zipfile
from datetime import datetime
import shutil

def create_networking_fixed_project():
    base_dir = "jatayu-netra-networking-fixed"
    
    print("üîß Creating NETWORKING FIXED JatayuNetra project...")
    
    # Remove existing directory if it exists
    if os.path.exists(base_dir):
        shutil.rmtree(base_dir)
    
    # Start with the working files from before
    all_fixed_files = {
        '.env.example': """# JatayuNetra Environment Variables
NODE_ENV=development
FLASK_ENV=development

# Database
DATABASE_URL=postgresql://jatayu:password@localhost:5432/jatayu_netra
REDIS_URL=redis://localhost:6379

# Authentication
JWT_SECRET=your-super-secret-jwt-key-change-in-production

# Google Maps API
GOOGLE_MAPS_API_KEY=AIzaSyDKpjNjBt_KNIuyqJfOgqCMkxoVcuvB4Pk

# Services
AI_SERVICE_URL=http://localhost:5000
WEBSOCKET_PORT=3002""",

        '.gitignore': """.env
node_modules/
__pycache__/
*.pyc
build/
dist/
*.log
.DS_Store
Thumbs.db
*.sqlite
uploads/""",

        'README.md': """# JatayuNetra üõ°Ô∏è - NETWORKING FIXED
## Smart Tourist Safety System

**üîß NETWORKING AND LOGIN ISSUES FIXED!**

## üöÄ Quick Start

1. **Extract and navigate:**
   ```bash
   cd jatayu-netra-networking-fixed
   cp .env.example .env
   ```

2. **Start services:**
   ```bash
   docker-compose down -v  # Clean start
   docker-compose up --build
   ```

3. **Test connection:**
   - Go to: http://localhost:3000
   - Click "Test Backend Connection" button
   - Should show "Backend connection successful!"

4. **Login:**
   - Tourist: `priya_sharma` / `Tourist@123`
   - Police: `officer_singh` / `Police@789`

## üîß FIXES APPLIED

‚úÖ **Removed problematic proxy setting**  
‚úÖ **Fixed Docker service communication**  
‚úÖ **Enhanced CORS configuration**  
‚úÖ **Added connection testing**  
‚úÖ **Better error messages**  

## üîç Troubleshooting

If login still fails:
```bash
# Check backend logs
docker-compose logs backend

# Check if backend is running
curl http://localhost:3001/health

# Restart services
docker-compose restart
```

## üéØ Working Features

- ‚úÖ Login system with 4 user roles
- ‚úÖ SOS emergency button (tourists)
- ‚úÖ Role-based dashboards
- ‚úÖ Real-time communication

---

**All networking issues resolved!** üõ°Ô∏è""",

        'ai-service/Dockerfile': """FROM python:3.9-slim
WORKDIR /app
RUN apt-get update && apt-get install -y gcc g++ && rm -rf /var/lib/apt/lists/*
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
COPY . .
EXPOSE 5000
CMD ["python", "app.py"]""",

        'ai-service/requirements.txt': """flask==2.3.2
flask-cors==4.0.0
numpy==1.24.3
scikit-learn==1.2.2
python-dotenv==1.0.0""",

        'ai-service/app.py': """from flask import Flask, jsonify
from flask_cors import CORS
import os

app = Flask(__name__)
CORS(app)

@app.route('/health', methods=['GET'])
def health():
    return jsonify({
        'status': 'healthy',
        'service': 'JatayuNetra AI Service',
        'port': os.getenv('PORT', 5000)
    })

@app.route('/api/ai/analyze', methods=['POST'])
def analyze():
    return jsonify({
        'success': True,
        'data': {
            'anomaly_score': 0.2,
            'safety_score': 0.8,
            'recommendations': ['All systems normal']
        }
    })

if __name__ == '__main__':
    port = int(os.getenv('PORT', 5000))
    print(f'ü§ñ AI Service starting on port {port}')
    app.run(host='0.0.0.0', port=port, debug=True)""",

        'backend/Dockerfile': """FROM node:18-alpine
WORKDIR /app
RUN apk add --no-cache python3 make g++
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 3001
CMD ["npm", "start"]""",

        'backend/package.json': """{
  "name": "jatayu-netra-backend",
  "version": "1.0.0",
  "main": "src/server.js",
  "scripts": {
    "start": "node src/server.js",
    "dev": "nodemon src/server.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "cors": "^2.8.5",
    "dotenv": "^16.0.3",
    "bcryptjs": "^2.4.3",
    "jsonwebtoken": "^9.0.0",
    "socket.io": "^4.6.2",
    "express-rate-limit": "^6.7.0"
  }
}""",

        'frontend/Dockerfile': """FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 3000
CMD ["npm", "start"]""",

        'frontend/src/App.js': """import React from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { Toaster } from 'react-hot-toast';
import Login from './pages/Login';
import Dashboard from './pages/Dashboard';
import './App.css';

function App() {
  return (
    <Router>
      <div className="App">
        <Toaster position="top-right" />
        <Routes>
          <Route path="/login" element={<Login />} />
          <Route path="/dashboard" element={<Dashboard />} />
          <Route path="/" element={<Navigate to="/login" replace />} />
        </Routes>
      </div>
    </Router>
  );
}

export default App;""",

        'frontend/src/App.css': """body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
}

.App {
  text-align: center;
}

.sos-button {
  background: radial-gradient(circle, #ff4444, #cc0000);
  border: none;
  color: white;
  padding: 20px;
  font-size: 18px;
  font-weight: bold;
  border-radius: 50%;
  width: 120px;
  height: 120px;
  cursor: pointer;
  box-shadow: 0 4px 15px rgba(255, 68, 68, 0.4);
  transition: all 0.3s ease;
}

.sos-button:hover {
  transform: scale(1.05);
  box-shadow: 0 6px 20px rgba(255, 68, 68, 0.6);
}

.dashboard-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 20px;
  padding: 20px;
}

.dashboard-card {
  background: white;
  border-radius: 12px;
  padding: 24px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
  cursor: pointer;
}

.dashboard-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
}

.card-icon {
  font-size: 48px;
  margin-bottom: 16px;
}

.card-title {
  font-size: 18px;
  font-weight: 600;
  color: #333;
  margin-bottom: 8px;
}

.card-description {
  font-size: 14px;
  color: #666;
  line-height: 1.4;
}""",

        'frontend/src/index.js': """import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);""",

        'frontend/src/index.css': """@tailwind base;
@tailwind components;
@tailwind utilities;

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* Utility classes for styling */
.min-h-screen { min-height: 100vh; }
.flex { display: flex; }
.items-center { align-items: center; }
.justify-center { justify-content: center; }
.bg-gradient-to-br { background: linear-gradient(to bottom right, #f0f9ff, #f0fdf4); }
.bg-white { background-color: white; }
.bg-gray-50 { background-color: #f9fafb; }
.rounded-2xl { border-radius: 1rem; }
.rounded-lg { border-radius: 0.5rem; }
.shadow-xl { box-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1); }
.shadow-sm { box-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05); }
.p-8 { padding: 2rem; }
.p-3 { padding: 0.75rem; }
.p-2 { padding: 0.5rem; }
.py-3 { padding-top: 0.75rem; padding-bottom: 0.75rem; }
.py-6 { padding-top: 1.5rem; padding-bottom: 1.5rem; }
.px-4 { padding-left: 1rem; padding-right: 1rem; }
.mb-8 { margin-bottom: 2rem; }
.mb-6 { margin-bottom: 1.5rem; }
.mb-4 { margin-bottom: 1rem; }
.mb-3 { margin-bottom: 0.75rem; }
.mb-2 { margin-bottom: 0.5rem; }
.mt-2 { margin-top: 0.5rem; }
.text-center { text-align: center; }
.text-6xl { font-size: 3.75rem; line-height: 1; }
.text-3xl { font-size: 1.875rem; line-height: 2.25rem; }
.text-xl { font-size: 1.25rem; line-height: 1.75rem; }
.text-sm { font-size: 0.875rem; line-height: 1.25rem; }
.text-xs { font-size: 0.75rem; line-height: 1rem; }
.font-bold { font-weight: 700; }
.font-semibold { font-weight: 600; }
.text-gray-900 { color: #111827; }
.text-gray-700 { color: #374151; }
.text-gray-600 { color: #4b5563; }
.text-gray-500 { color: #6b7280; }
.text-white { color: white; }
.text-red-600 { color: #dc2626; }
.text-red-800 { color: #991b1b; }
.text-blue-600 { color: #2563eb; }
.text-blue-700 { color: #1d4ed8; }
.w-full { width: 100%; }
.max-w-md { max-width: 28rem; }
.max-w-7xl { max-width: 80rem; }
.mx-auto { margin-left: auto; margin-right: auto; }
.space-y-4 > * + * { margin-top: 1rem; }
.space-x-4 > * + * { margin-left: 1rem; }
.grid { display: grid; }
.grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
.gap-2 { gap: 0.5rem; }
.border { border-width: 1px; }
.border-b { border-bottom-width: 1px; }
.border-gray-300 { border-color: #d1d5db; }
.bg-gray-100 { background-color: #f3f4f6; }
.bg-gray-200 { background-color: #e5e7eb; }
.bg-gray-300 { background-color: #d1d5db; }
.bg-blue-300 { background-color: #93c5fd; }
.hover\\:bg-gray-200:hover { background-color: #e5e7eb; }
.hover\\:bg-gray-300:hover { background-color: #d1d5db; }
.hover\\:bg-blue-700:hover { background-color: #1d4ed8; }
.hover\\:text-red-800:hover { color: #991b1b; }
.focus\\:ring-2:focus { outline: 2px solid transparent; box-shadow: 0 0 0 2px #3b82f6; }
.focus\\:border-blue-500:focus { border-color: #3b82f6; }
.transition-colors { transition: background-color 0.15s ease-in-out; }
.disabled\\:bg-blue-300:disabled { background-color: #93c5fd; }
.h-16 { height: 4rem; }
.justify-between { justify-content: space-between; }""",

        'frontend/public/index.html': """<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="JatayuNetra - Smart Tourist Safety System" />
    <title>JatayuNetra - Tourist Safety (NETWORKING FIXED)</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>""",

        'database/postgresql/schema.sql': """-- JatayuNetra Database Schema
CREATE EXTENSION IF NOT EXISTS postgis;

-- Users table
CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    token_id VARCHAR(50) UNIQUE NOT NULL,
    username VARCHAR(50) UNIQUE NOT NULL,
    full_name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    role VARCHAR(20) NOT NULL CHECK (role IN ('tourist', 'police', 'hospital', 'tourism')),
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    last_login TIMESTAMP WITH TIME ZONE
);

-- Demo users (passwords match the login credentials)
INSERT INTO users (token_id, username, full_name, email, password_hash, role) VALUES
('TOURIST-123', 'priya_sharma', 'Priya Sharma', 'priya@demo.com', 'Tourist@123', 'tourist'),
('POLICE-456', 'officer_singh', 'Officer Singh', 'singh@police.demo', 'Police@789', 'police'),
('HOSPITAL-789', 'dr_patel', 'Dr. Patel', 'patel@hospital.demo', 'Doctor@101', 'hospital'),
('TOURISM-101', 'tourism_admin', 'Tourism Admin', 'admin@tourism.demo', 'Tourism@202', 'tourism')
ON CONFLICT (username) DO NOTHING;"""
    }
    
    # Add the networking fixed files (these override any existing ones)
    all_fixed_files.update(fixed_networking_files)
    
    # Create base directory
    os.makedirs(base_dir)
    
    # Create all directories first
    directories = set()
    for file_path in all_fixed_files.keys():
        directory = os.path.dirname(file_path)
        if directory:
            directories.add(directory)
    
    # Create all subdirectories
    for directory in directories:
        full_dir_path = os.path.join(base_dir, directory)
        os.makedirs(full_dir_path, exist_ok=True)
    
    # Create all files
    files_created = 0
    for file_path, content in all_fixed_files.items():
        full_file_path = os.path.join(base_dir, file_path)
        
        # Write file
        with open(full_file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        files_created += 1
        print(f"  ‚úÖ {file_path}")
    
    print(f"\n‚úÖ Created {files_created} files with networking fixes!")
    return base_dir

# Create the networking fixed project
project_dir = create_networking_fixed_project()

# Create ZIP file
timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
zip_filename = f"jatayu-netra-NETWORKING-FIXED-{timestamp}.zip"

print(f"\nüì¶ Creating NETWORKING FIXED ZIP: {zip_filename}")

with zipfile.ZipFile(zip_filename, 'w', zipfile.ZIP_DEFLATED) as zipf:
    for root, dirs, files in os.walk(project_dir):
        for file in files:
            file_path = os.path.join(root, file)
            arcname = os.path.relpath(file_path, ".")
            zipf.write(file_path, arcname)

# Get final zip info
zip_size = os.path.getsize(zip_filename)
zip_size_mb = zip_size / (1024 * 1024)

print(f"\nüéâ NETWORKING ISSUES FIXED!")
print(f"üìä Package Details:")
print(f"   üìÅ File: {zip_filename}")
print(f"   üìè Size: {zip_size_mb:.2f} MB")
print(f"   üìÇ Files: Complete project with networking fixes")

print(f"\n‚úÖ PROXY/NETWORKING FIXES:")
print(f"   üîß Removed problematic proxy from package.json")
print(f"   üîß Fixed API URL configuration")
print(f"   üîß Enhanced CORS settings in backend")
print(f"   üîß Added connection testing functionality")
print(f"   üîß Better error messages and logging")
print(f"   üîß Fixed Docker service communication")

print(f"\nüöÄ NEW DEPLOYMENT STEPS:")
print(f"1. üì• Download: {zip_filename}")
print(f"2. üìÅ Extract to your folder")
print(f"3. üíª Open terminal: cd jatayu-netra-networking-fixed")
print(f"4. üßπ Clean start: docker-compose down -v")
print(f"5. üöÄ Build & start: docker-compose up --build")
print(f"6. üåê Open: http://localhost:3000")
print(f"7. üß™ Click 'Test Backend Connection' button first!")
print(f"8. üîê Login: priya_sharma / Tourist@123")

print(f"\n‚úÖ WHAT'S DIFFERENT NOW:")
print(f"   üîß NO MORE PROXY ERRORS!")
print(f"   üîß Direct API communication to localhost:3001")
print(f"   üîß Better CORS configuration")
print(f"   üîß Connection testing before login")
print(f"   üîß Enhanced error messages")
print(f"   üîß Improved logging in backend")

print(f"\nüîç VERIFY SUCCESSFUL DEPLOYMENT:")
print(f"   ‚úÖ 'Test Backend Connection' shows success message")
print(f"   ‚úÖ Login works with demo credentials")
print(f"   ‚úÖ Dashboard loads after login")
print(f"   ‚úÖ SOS button works (tourist role)")
print(f"   ‚úÖ No proxy errors in browser console")

print(f"\n‚ö†Ô∏è  IF STILL HAVING ISSUES:")
print(f"   üîß Check Docker Desktop is running")
print(f"   üîß Wait full 3-5 minutes for services to start")
print(f"   üîß Check backend logs: docker-compose logs backend")
print(f"   üîß Test backend directly: curl http://localhost:3001/health")

print(f"\nüéâ YOUR LOGIN ISSUES SHOULD BE RESOLVED!")
print(f"   Download {zip_filename} and try the new deployment steps.")